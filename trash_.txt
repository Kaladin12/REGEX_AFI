function parentheses_matcher(regex){
    let matches = [];
    let open = finder(regex, '(');
    let closed = finder(regex, ')');
    let parentheses = regex.match(/(\(|\))/gmi);
    let last_seen = null, current_closed = 0;
    // function to get the parentheses order(agrupation)
    parentheses.forEach( par => {
        if (par == '('){
            if (last_seen == null){
                last_seen = 0
            }
            else {
                // agrega al contador cada vez que vea un (
                last_seen += 1;
            }
        }
        else {
            // si ve un ), entonces agregar el scope de los parentesis actuales
            let cosa = [open[last_seen], closed[current_closed]]
            if (regex.substring(closed[current_closed]+1, closed[current_closed]+2) == '*'){
                cosa[1]+=1
            }
            matches.push( cosa );
            // eliinamos el indice del parentesis abiertto ya tomado
            open.splice(last_seen, 1)
            // recorremos en 1 para parentesis cerrados
            current_closed += 1;
            // vamos para atras 1 en parentesis abiertos
            last_seen -= 1;
        }
    })
    return matches
}

//0U((01 U 011 (1 U 0)*) U 01)
function regex_splitter_(regex){
    let cuack = parentheses_matcher(regex)
    console.log(cuack)
    /*console.log(cuack.sort((a, b) => {
        return a[0]-b[0]
    })) */
}

function finder(regex, symbol){
    let occurences = [], count = 0;
    let position = regex.indexOf(symbol)
    while (position !== -1) {
        count++
        occurences.push(position)
        position = regex.indexOf(symbol, position + 1)
    }
    return occurences
}