let objects = []
    let temp = null
    let stack = [];
    [...regex].forEach( symbol => {
        if (symbol == '('){
            objects.push(temp)
            temp = symbol
            stack.push(')')
        }
        else if (symbol == ')'){
            if (stack[0]!=symbol){
                return 'error'
            }
            stack.pop()
            temp += symbol; 
            objects.push(temp)
            temp = null
        }
        temp += symbol;
        if (symbol == '*'){
            objects[objects.length-1] += symbol
        }
    } )
    console.log(objects)

class Tree{
    constructor(){
        this.root = null;
    }

    add_root(root){
        this.root = root;
    }
}

class Node{
    constructor(value){
        this.value = value
        this.leftChild = null;
        this.rightChild = null;
    }

    add_value(value){
        this.value = value;
    }
}
let m = {
    '(':'o',
    '*':'*',
    'U':'+'
}

   e.forEach( exp => {
        let start;
        if (indices.length == 0){
            start = 0;
        }
        else{
            start = indices[indices.length-1]
        }
        let s = regex.indexOf(exp,start)
        indices.push( { "start": s, "end":s+exp.length-1} )
        if (index > 0){
            l.push(regex.substring(indices[index-1].end+1, indices[index].start))
        }
        l.push(exp)
        if (index == e.length-1){
            l.push(regex.substring(indices[index].end+1))
        }
        index ++
    } )
